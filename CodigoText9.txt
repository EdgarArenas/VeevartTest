using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static void Main()
    {
        // Ejemplo de uso
        List<int> arregloPisos = new List<int> { 5, 29, 13, 10 };
        int pisoInicialEjecucion = 4;
        Dictionary<int, int> mapaPisosIngresados = new Dictionary<int, int> { { 5, 2 }, { 29, 10 }, { 13, 1 }, { 10, 1 } };

        ImprimirInformacionElevador(arregloPisos, pisoInicialEjecucion, mapaPisosIngresados);
    }

    static void ImprimirInformacionElevador(List<int> arregloPisos, int pisoInicialEjecucion, Dictionary<int, int> mapaPisosIngresados)
    {
        // Inicialización
        string sentido = "Subiendo";
        int pisoActual = pisoInicialEjecucion;
        List<int> pisosEnEspera = new List<int>(arregloPisos);

        // Información inicial
        Console.WriteLine($"Arreglo de pisos: [{string.Join(", ", arregloPisos)}]");
        Console.WriteLine($"Piso inicial de ejecución: {pisoInicialEjecucion}");
        Console.WriteLine($"Pisos ingresados: {FormatoDiccionario(mapaPisosIngresados)}");
        Console.WriteLine($"Sentido: {sentido}");

        // Iteraciones del elevador
        int i = 0;
        while (true)
        {
            // Método para el estado del elevador
            void ImprimirEstado()
            {
                Console.WriteLine($"{i * 2 + 1}. Elevador en piso {pisoActual}");
                Console.WriteLine($"{i * 2 + 2}. Elevador {sentido.ToLower()}");
            }

            ImprimirEstado();

            if (mapaPisosIngresados.ContainsKey(pisoActual))
            {
                int nuevoPiso = mapaPisosIngresados[pisoActual];
                Console.WriteLine($"{i * 2 + 3}. Piso ingresado {nuevoPiso} -> [{string.Join(", ", pisosEnEspera)}]");
                if (!pisosEnEspera.Contains(nuevoPiso))
                {
                    pisosEnEspera.Add(nuevoPiso);
                }
            }

            if (sentido == "Subiendo")
            {
                // Pisos por encima del piso actual
                List<int> pisosFiltrados = pisosEnEspera.FindAll(p => p > pisoActual);
                if (pisosFiltrados.Count > 0)
                {
                    int siguientePiso = pisosFiltrados.Min();
                    pisoActual = siguientePiso;
                }
                else
                {
                    Console.WriteLine($"{i * 2 + 4}. Elevador se detiene");
                    sentido = "Bajando";
                }
            }
            else
            {
                // Pisos por debajo del piso actual
                List<int> pisosFiltrados = pisosEnEspera.FindAll(p => p < pisoActual);
                if (pisosFiltrados.Count > 0)
                {
                    int siguientePiso = pisosFiltrados.Max();
                    pisoActual = siguientePiso;
                }
                else
                {
                    Console.WriteLine($"{i * 2 + 4}. Elevador se detiene");
                    break;  // No hay más pisos en espera
                }
            }

            // Eliminar el piso actual del arreglo de pisos en espera
            pisosEnEspera.RemoveAll(p => p == pisoActual);

            i++;
        }
    }

    // Método para formatear un diccionario
    static string FormatoDiccionario(Dictionary<int, int> diccionario)
    {
        return "{" + string.Join(", ", diccionario.Select(kv => $"{kv.Key}:{kv.Value}")) + "}";
    }
}
